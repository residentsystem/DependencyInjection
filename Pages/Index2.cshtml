@page
@model IndexModel2
@{
}

<div class="container intro">
    <section class="row col-sm-12">
        <article class="col-sm-12 col-md-12 col-lg-12">
            <header>
                <h1>New Mail Service</h1>
            </header>
        </article>
    </section>
</div>

<div class="container">
    <section class="row col-sm-12">
        <article class="col-sm-12 col-md-12 col-lg-12">
            <div class="box-display">
                <p>
                    Looking at the mail service used to create the mail account, we can see that using a different service would 
                    imply modifying codes in a lot of places. Changing all that code is quite simple in a small application like 
                    this but can become an issue when a service is used in multiple parts of a large project. 
                </p>

                <p>
                    For instance, when the mail service is replaced with Outlook, as shown below, the tightly coupled service also 
                    need to be changed everywhere it is used in the application.
                </p>

                <h2>Index2.cshtml.cs</h2>

                <pre>
                    <code>
                        private OutlookMailService _outlookmailservice;

                        public IndexModel2()
                        {
                            _outlookmailservice = new OutlookMailService();
                        }

                        public void OnGet()
                        {
                            EmailConfirmation = _outlookmailservice.CreateMailAccount(_useraccount.Username);
                        }
                    </code>
                </pre>

                <h2>OutlookMailService.cs</h2>

                <pre>
                    <code>
                        public class OutlookMailService
                        {
                            public string CreateMailAccount(string username)
                            {
                                string domain = "&#64;outlook.com";
                                return $"\nEmail \"{username}{domain}\" has been created successfuly.\n";
                            }
                        }
                    </code>
                </pre>

                <div class="confirmation">
                    <p>@Model.UserConfirmation</p>
                    <p>@Model.EmailConfirmation</p>
                </div>

                <p>
                    Now the message indicate the email account was created using Outlook. The new service is working but too much 
                    code needed to be changed inside the main class. The best way to make this work would be to create a dependency 
                    outside the class that uses it.
                </p>
            </div>
            <div class="box-display">
                <ul>
                    <li>
                        <a href="/Index">Previous</a>
                    </li>
                    <li>
                        <a href="/Index3">Next</a>
                    </li>
                </ul>
            </div>
        </article>
    </section>
</div>
